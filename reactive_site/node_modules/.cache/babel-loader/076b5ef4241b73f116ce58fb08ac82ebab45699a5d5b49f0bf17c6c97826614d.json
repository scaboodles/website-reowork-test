{"ast":null,"code":"var _jsxFileName = \"/Users/owen/dev/sitemk2test/reactive_site/src/pigeonMingle/game.js\";\nimport { IonPhaser } from \"@ion-phaser/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 750,\n  physics: {\n    default: \"arcade\",\n    arcade: {\n      debug: false,\n      gravity: {\n        y: 100\n      }\n    }\n  },\n  pixelArt: true,\n  antialias: false,\n  autoRound: true,\n  roundPixels: true,\n  backgroundColor: \"#FFFF00\",\n  inputKeyboard: true,\n  scene: {\n    preload: preload,\n    create: create,\n    update: update\n  }\n};\n\n//global variables dont @me\nvar space;\nvar left;\nvar right;\nvar down;\nvar j;\nvar k;\nvar l;\nvar follow_bool = true;\nfunction toggle_follow() {\n  follow_bool = !follow_bool;\n}\nvar game = new Phaser.Game(config),\n  Main = function () {};\nconst SCENE_WIDTH = 3200;\nconst SCENE_HEIGHT = 2000;\nvar pigeon;\nvar pigeonSound;\nvar back;\nvar mid;\nvar fore;\nvar splashScreen;\nvar squawkImg;\nvar lastSampleTime = 0;\nvar onGround = true;\nvar pigeonAgents = []; //list of computer pigeons\nvar observedRadius = 550; //distance computer pigeons can see\nvar perches = [];\nvar businessMen = [];\nconst MAX_VELOCITY = {\n  x: 300,\n  y: 300\n};\nconst DRAG_X = 0.85;\nconst LIFT_DRAG = 0.5;\nconst BODY_OFFSET = {\n  x: 3,\n  y: 1\n};\nconst MAX_FLOCK = 2;\nconst PIGEON_DIMENSIONS = {\n  width: 7,\n  height: 11\n};\nconst FLOCK_NOISE = 100;\nconst LEADING_WEIGHT = 2;\nconst FLAP_CONST = 100;\n\n//preload fetches assets and stuff\nfunction preload() {\n  this.load.aseprite(\"pigeon\", \"/art_assets/pigeon16by.png\", \"/art_assets/pigeon16by.json\");\n  this.load.image(\"ground\", \"/art_assets/placeholder_ground.png\");\n  this.load.audio(\"pigeonNoise\", [\"/pigeon_sound.mp3\"]);\n  this.load.image(\"sky\", \"/art_assets/bg_skyline.png\");\n  this.load.image(\"back\", \"/art_assets/bg_back.png\");\n  this.load.image(\"mid\", \"/art_assets/bg_mid.png\");\n  this.load.image(\"fore\", \"/art_assets/bg_fore.png\");\n  this.load.image(\"park\", \"/art_assets/park.png\");\n  this.load.image(\"squawkImg\", \"/art_assets/squawk.png\");\n  this.load.image(\"splashScreen\", \"/art_assets/pigeonSplashScreen.png\");\n  this.load.image(\"bench\", \"/art_assets/bench.png\");\n  this.load.image(\"gizmo\", \"/art_assets/gizmo.png\");\n  this.load.image(\"lamp\", \"/art_assets/lamp.png\");\n  this.load.image(\"redBrickBuilding\", \"/art_assets/red_brick_building.png\");\n  this.load.image(\"empty\", \"/art_assets/empty.png\");\n  this.load.aseprite(\"businessMan\", \"/art_assets/bizniz_man.png\", \"/art_assets/bizniz_man.json\");\n}\n\n//create loads assets into scene\nfunction create() {\n  const player_layer = this.add.layer().setDepth(5);\n  const pigeon_layer = this.add.layer().setDepth(4);\n  const man_layer = this.add.layer().setDepth(3);\n  const prop_layer = this.add.layer().setDepth(2);\n  const building_layer = this.add.layer().setDepth(1);\n  const bg_layer = this.add.layer().setDepth(0);\n\n  //prep scene\n  this.physics.world.setBounds(0, 0, SCENE_WIDTH, SCENE_HEIGHT, true, true, true, true);\n  this.cameras.main.setSize(800, 750);\n\n  //add art and sound\n  bg_layer.add(this.add.image(800, 400, \"sky\").setScrollFactor(0.15).setScale(10, 10));\n\n  /*\n  back = this.add.image(0,800,'back')\n      .setOrigin(0,1)\n      .setScrollFactor(.25)\n      .setScale(10,10);\n   mid = this.add.image(0,800,'mid')\n      .setOrigin(0,1)\n      .setScrollFactor(.5)\n      .setScale(10,10);\n   fore = this.add.image(0,820,'fore')\n      .setOrigin(0,1)\n      .setScrollFactor(.75)\n      .setScale(10,10);\n  */\n  bg_layer.add(this.add.image(1600, 1300, \"park\").setScale(10, 10));\n\n  //    splashScreen = this.add.image(400, 500, \"splashScreen\");\n\n  //pigeonSound = this.sound.add('pigeonNoise',{loop:false});\n\n  //bind keys\n  space = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\n  left = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);\n  right = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);\n  down = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);\n  j = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.J);\n  k = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.K);\n  l = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.L);\n  var tags = this.anims.createFromAseprite(\"pigeon\");\n  var manTages = this.anims.createFromAseprite(\"businessMan\");\n\n  //player is created\n  pigeon = this.physics.add.sprite(100, 100, \"pigeon\").play({\n    key: \"idle\",\n    frameRate: 2,\n    repeat: -1\n  }).setScale(3);\n  pigeon.setCollideWorldBounds(true);\n  pigeon.body.setSize(PIGEON_DIMENSIONS.width, PIGEON_DIMENSIONS.height, true);\n  pigeon.body.setOffset(BODY_OFFSET.x, BODY_OFFSET.y);\n  pigeon.body.setMaxVelocity(MAX_VELOCITY.x, MAX_VELOCITY.y);\n  pigeon.body.allowDrag = true;\n  pigeon.setDamping(true);\n  pigeon.body.setDragX(DRAG_X);\n  pigeon.body.checkCollision.up = false;\n  pigeon.body.checkCollision.left = false;\n  pigeon.body.checkCollision.right = false;\n  pigeon.onPerch = false;\n  pigeon.currPerch = 0;\n  player_layer.add(pigeon);\n\n  //jank ass start screen\n  //    this.input.once(\n  //        \"pointerdown\",\n  //        function (event) {\n  //            splashScreen.destroy();\n  //\n  this.cameras.main.setBounds(0, 0, SCENE_WIDTH, SCENE_HEIGHT, true).startFollow(pigeon).setDeadzone(0, 0);\n  //        },\n  //        this\n  //    );\n\n  const game = this;\n\n  //make pigeon function creates computer controlled pigeons\n  window.makePigeon = function () {\n    let robo_pigeon = game.physics.add.sprite(pigeon.body.position.x, pigeon.body.position.y, \"pigeon\").play({\n      key: \"idle\",\n      frameRate: 2,\n      repeat: -1\n    }).setScale(3);\n    robo_pigeon.setCollideWorldBounds(true);\n    robo_pigeon.body.setSize(PIGEON_DIMENSIONS.width, PIGEON_DIMENSIONS.height, true);\n    robo_pigeon.setOffset(BODY_OFFSET.x, BODY_OFFSET.y);\n    robo_pigeon.body.setMaxVelocity(MAX_VELOCITY.x, MAX_VELOCITY.y);\n    robo_pigeon.body.allowDrag = true;\n    robo_pigeon.setDamping(true);\n    robo_pigeon.body.checkCollision.up = false;\n    robo_pigeon.body.checkCollision.left = false;\n    robo_pigeon.body.checkCollision.right = false;\n    robo_pigeon.body.setDragX(DRAG_X);\n    robo_pigeon.onPerch = false;\n    robo_pigeon.currPerch = 0;\n    pigeon_layer.add(robo_pigeon);\n    for (let prop of perches) {\n      game.physics.add.collider(robo_pigeon, prop, function () {\n        robo_pigeon.onPerch = true;\n        robo_pigeon.currPerch = prop;\n      });\n    }\n    pigeonAgents.push({\n      object: robo_pigeon,\n      flapCompleted: true,\n      mode: \"stand\",\n      freezeFrame: 0,\n      noise: {\n        x: generateNoisy(FLOCK_NOISE),\n        y: generateNoisy(FLOCK_NOISE)\n      },\n      target: 0,\n      justLanded: true,\n      slice: 0,\n      independent: false,\n      following: -1\n    });\n  };\n  window.makeIndependentPigeon = function () {\n    let robo_pigeon = game.physics.add.sprite(100, 100, \"pigeon\").play({\n      key: \"idle\",\n      frameRate: 2,\n      repeat: -1\n    }).setScale(3);\n    robo_pigeon.setCollideWorldBounds(true);\n    robo_pigeon.body.setSize(PIGEON_DIMENSIONS.width, PIGEON_DIMENSIONS.height, true);\n    robo_pigeon.setOffset(BODY_OFFSET.x, BODY_OFFSET.y);\n    robo_pigeon.body.setMaxVelocity(MAX_VELOCITY.x, MAX_VELOCITY.y);\n    robo_pigeon.body.allowDrag = true;\n    robo_pigeon.setDamping(true);\n    robo_pigeon.body.checkCollision.up = false;\n    robo_pigeon.body.checkCollision.left = false;\n    robo_pigeon.body.checkCollision.right = false;\n    robo_pigeon.body.setDrag(DRAG_X);\n    robo_pigeon.onPerch = false;\n    robo_pigeon.currPerch = 0;\n    pigeon_layer.add(robo_pigeon);\n    for (let prop of perches) {\n      game.physics.add.collider(robo_pigeon, prop, function () {\n        robo_pigeon.onPerch = true;\n        robo_pigeon.currPerch = prop;\n      });\n    }\n    let noises = {\n      x: generateNoisy(FLOCK_NOISE),\n      y: generateNoisy(FLOCK_NOISE)\n    };\n    let newTarget = generateRoamTarget(noises.x);\n    noises.x = newTarget[1];\n    pigeonAgents.push({\n      object: robo_pigeon,\n      flapCompleted: true,\n      mode: \"stand\",\n      freezeFrame: 0,\n      noise: noises,\n      target: newTarget[0],\n      justLanded: false,\n      slice: 0,\n      independent: true,\n      following: -1\n    });\n  };\n  window.makeBench = function () {\n    let bench = game.physics.add.staticSprite(pigeon.body.position.x, pigeon.body.position.y, \"bench\");\n    bench.offsetX = 9;\n    bench.body.setSize(174, 5, true).setOffset(bench.offsetX, 0);\n    perches.push(bench);\n    prop_layer.add(bench);\n    game.physics.add.collider(pigeon, bench, function () {\n      pigeon.onPerch = true;\n      pigeon.currPerch = bench;\n    });\n    for (agent of pigeonAgents) {\n      let currAgent = agent;\n      game.physics.add.collider(agent.object, bench, function () {\n        currAgent.object.onPerch = true;\n        currAgent.object.currPerch = bench;\n      });\n    }\n  };\n  window.makeLamp = function () {\n    let lamp = game.physics.add.staticSprite(pigeon.body.position.x, pigeon.body.position.y, \"lamp\");\n    lamp.offsetX = 10;\n    lamp.body.setSize(30, 5, true).setOffset(lamp.offsetX, 10);\n    perches.push(lamp);\n    prop_layer.add(lamp);\n    game.physics.add.collider(pigeon, lamp, function () {\n      pigeon.onPerch = true;\n      pigeon.currPerch = lamp;\n    });\n    for (agent of pigeonAgents) {\n      let currAgent = agent;\n      game.physics.add.collider(agent.object, lamp, function () {\n        currAgent.object.onPerch = true;\n        currAgent.object.currPerch = lamp;\n      });\n    }\n  };\n  window.makeBusinessMan = function () {\n    let man = game.physics.add.sprite(pigeon.body.position.x, SCENE_HEIGHT - 96, \"businessMan\").play({\n      key: \"man_walk\",\n      frameRate: 2,\n      repeat: -1\n    }).setScale(3);\n    man.facing = randomDirection();\n    man.body.setAllowGravity(false);\n    businessMen.push(man);\n    man_layer.add(man);\n  };\n  window.togglePerch = function (entity, bool) {\n    entity.onPerch = bool;\n  };\n  window.drawGizmo = function (_ref) {\n    let {\n      x,\n      y\n    } = _ref;\n    let gizmo = game.add.sprite(x, y, \"gizmo\");\n    player_layer.add(gizmo);\n    return {\n      x,\n      y\n    };\n  };\n\n  //--------------------\n  drawMap(this, building_layer, prop_layer);\n}\nfunction drawMap(game, buildingLayer, propLayer) {\n  makeBuilding(game, buildingLayer, 500);\n}\nfunction makeBuilding(game, buildingLayer, x) {\n  let yOffset = 750;\n  let topPerch = game.physics.add.staticSprite(x, SCENE_HEIGHT - yOffset, \"redBrickBuilding\");\n  topPerch.body.setSize(topPerch.body.width, 5).setOffset(0, 0);\n  buildingLayer.add(topPerch);\n  perches.push(topPerch);\n  game.physics.add.collider(pigeon, topPerch, function () {\n    pigeon.onPerch = true;\n    pigeon.currPerch = topPerch;\n  });\n  for (agent of pigeonAgents) {\n    let currAgent = agent;\n    game.physics.add.collider(agent.object, topPerch, function () {\n      currAgent.object.onPerch = true;\n      currAgent.object.currPerch = topPerch;\n    });\n  }\n  addSills(game, x, yOffset);\n  addRailings(game, x, yOffset);\n}\nfunction addRailings(game, x, yOffset) {\n  let xOffset = x + 11;\n  yOffset = SCENE_HEIGHT - yOffset + 310;\n  for (let i = 0; i < 3; i++) {\n    addRailing(game, xOffset, yOffset - i * 320);\n  }\n}\nfunction addRailing(game, x, yOffset) {\n  let railing = game.physics.add.staticSprite(x, yOffset, \"empty\");\n  railing.body.setSize(435, 5);\n  perches.push(railing);\n  game.physics.add.collider(pigeon, railing, function () {\n    pigeon.onPerch = true;\n    pigeon.currPerch = railing;\n  });\n  for (agent of pigeonAgents) {\n    let currAgent = agent;\n    game.physics.add.collider(agent.object, railing, function () {\n      currAgent.object.onPerch = true;\n      currAgent.object.currPerch = railing;\n    });\n  }\n}\nfunction addSills(game, x, yOffset) {\n  yOffset += 497;\n  for (let i = 0; i < 3; i++) {\n    addTopSillRow(game, x, yOffset - i * 322, i != 0);\n    addBottomSillRow(game, x, yOffset - i * 322, i != 0);\n  }\n}\nfunction addBottomSillRow(game, x, yOffset, obscured) {\n  let sills = [];\n  let xOffset = x - 340;\n  yOffset = SCENE_HEIGHT - yOffset + 215;\n  let secondSill = game.physics.add.staticSprite(xOffset, yOffset, \"empty\");\n  sills[0] = secondSill;\n  xOffset = x + 340;\n  let fourthSill = game.physics.add.staticSprite(xOffset, yOffset, \"empty\");\n  sills[1] = fourthSill;\n  for (sill of sills) {\n    let currSill = sill;\n    currSill.body.setSize(125, 5);\n    perches.push(sill);\n    game.physics.add.collider(pigeon, currSill, function () {\n      pigeon.onPerch = true;\n      pigeon.currPerch = currSill;\n    });\n    for (agent of pigeonAgents) {\n      let currAgent = agent;\n      game.physics.add.collider(agent.object, currSill, function () {\n        currAgent.object.onPerch = true;\n        currAgent.object.currPerch = currSill;\n      });\n    }\n  }\n}\nfunction addTopSillRow(game, x, yOffset, obscured) {\n  let sills = [];\n  let xOffset = x - 117;\n  yOffset = SCENE_HEIGHT - yOffset;\n  if (!obscured) {\n    let firstSill = game.physics.add.staticSprite(xOffset, yOffset, \"empty\");\n    sills[3] = firstSill;\n  }\n  xOffset -= 223;\n  let secondSill = game.physics.add.staticSprite(xOffset, yOffset, \"empty\");\n  sills[0] = secondSill;\n  xOffset = x + 117;\n  let thirdSill = game.physics.add.staticSprite(xOffset, yOffset, \"empty\");\n  sills[1] = thirdSill;\n  xOffset += 223;\n  let fourthSill = game.physics.add.staticSprite(xOffset, yOffset, \"empty\");\n  sills[2] = fourthSill;\n  for (sill of sills) {\n    let currSill = sill;\n    currSill.body.setSize(175, 5);\n    perches.push(currSill);\n    game.physics.add.collider(pigeon, currSill, function () {\n      pigeon.onPerch = true;\n      pigeon.currPerch = currSill;\n    });\n    for (agent of pigeonAgents) {\n      let currAgent = agent;\n      game.physics.add.collider(agent.object, currSill, function () {\n        currAgent.object.onPerch = true;\n        currAgent.object.currPerch = currSill;\n      });\n    }\n  }\n}\n\n// lastState is immutable!!\nlet lastState = {\n  direction: 1,\n  mode: \"walk\"\n};\n\n//update runs every tick\nfunction update(time, delta) {\n  let direction = Phaser.Input.Keyboard.JustDown(left) ? -1 : Phaser.Input.Keyboard.JustDown(right) ? 1 : lastState.direction; //direction for player\n\n  const isGrounded = pigeon.body.onFloor();\n  pigeon.body.setDragY(pigeon.body.velocity.y > 0 ? 0 : LIFT_DRAG);\n  if (!isGrounded) {\n    pigeon.onPerch = false;\n  }\n  let mode = getNewMode(lastState.mode, isGrounded, {\n    space,\n    left,\n    right\n  });\n  if (direction != lastState.direction) {\n    pigeon.flipX = direction == -1 ? true : false;\n    pigeon.body.setVelocityX(0);\n  }\n  if (mode != lastState.mode) {\n    pigeon.play(PIGEON_STATE_ANIMATIONS.get(mode));\n  }\n\n  // just flapped\n  if (Phaser.Input.Keyboard.JustDown(space)) {\n    for (agent of pigeonAgents) {\n      agent.sawFlap = true;\n    }\n    if (left.isDown || right.isDown) {\n      flapMove(pigeon);\n    } else {\n      flapNoMove(pigeon);\n    }\n  } else if (mode != lastState.mode) {\n    switch (mode) {\n      case \"stand\":\n        stand(pigeon);\n        break;\n    }\n  } else {\n    switch (mode) {\n      case \"walk\":\n        walk(pigeon);\n        break;\n      case \"drift\":\n        drift(pigeon);\n        break;\n      case \"dive\":\n        dive(pigeon);\n        break;\n      case \"glide\":\n        glide(pigeon);\n        break;\n      case \"swoop\":\n        swoop(pigeon);\n        break;\n    }\n  }\n  if (direction != lastState.direction || mode != lastState.mode) {\n    lastState = {\n      mode,\n      direction\n    };\n  }\n  if (mode == \"dive\" || pigeon.body.velocity.y > 150) {\n    pigeon.body.checkCollision.down = false;\n  } else {\n    pigeon.body.checkCollision.down = true;\n  }\n\n  //    if(Phaser.Input.Keyboard.JustDown(j)){\n  //        pigeonSound.play();\n  //        //console.log(\"playing sound\");\n  //    }\n\n  for (agent of pigeonAgents) {\n    pigeonThink(agent, delta);\n  }\n  for (man of businessMen) {\n    businessManLogic(man);\n  }\n}\nfunction businessManLogic(man) {\n  man.flipX = man.facing == 1 ? false : true;\n  man.x += 1.5 * man.facing;\n}\n\n//functionally decomposed mmovement bby yeah\nfunction flapMove(pigeon) {\n  pigeon.setVelocity(pigeon.body.velocity.x + 20 * (pigeon.flipX ? -1 : 1), pigeon.body.velocity.y - 30);\n}\nfunction flapNoMove(pigeon) {\n  pigeon.setVelocity(pigeon.body.velocity.x + 10 * (pigeon.flipX ? -1 : 1), pigeon.body.velocity.y - 40 - pigeon.body.position.y / 20);\n}\nfunction glide(pigeon) {\n  pigeon.setVelocityY(pigeon.body.velocity.y - .75);\n  pigeon.setVelocityX(pigeon.body.velocity.x + 1 * (pigeon.flipX ? -1 : 1));\n}\nfunction drift(pigeon) {\n  pigeon.setVelocityX(pigeon.body.velocity.x + 1 * (pigeon.flipX ? -1 : 1));\n}\nfunction walk(pigeon) {\n  pigeon.x += 1 * (pigeon.flipX ? -1 : 1);\n  pigeon.setVelocity((pigeon.flipX ? -1 : 1) * 0.5, 0);\n}\nfunction stand(pigeon) {\n  pigeon.setVelocity(0, 0);\n}\nfunction dive(pigeon) {\n  pigeon.setVelocityY(pigeon.body.velocity.y + 3);\n  pigeon.setVelocityX(pigeon.body.velocity.x + 2 * (pigeon.flipX ? -1 : 1));\n}\nfunction swoop(pigeon) {\n  pigeon.setVelocityX(pigeon.body.velocity.x + 2 * (pigeon.flipX ? -1 : 1));\n}\nfunction roboFlap(pigeon, posDifVector, velDifVector) {\n  let body = pigeon.body;\n  let velocity = body.velocity;\n  if (posDifVector.y < 0) {\n    body.setVelocityY(velocity.y - (Math.abs(posDifVector.y) / 3 + Math.abs(velDifVector.y) / 5));\n  }\n  if (posDifVector.x * (pigeon.flipX ? -1 : 1) > 0) {\n    body.setVelocityX(velocity.x + (Math.abs(posDifVector.x) / 4 + Math.abs(velDifVector.x) / 5) * (pigeon.flipX ? -1 : 1));\n  }\n}\n\n//pigeon state machine\nconst PIGEON_STATE_ANIMATIONS = new Map([[\"walk\", {\n  key: \"walk\",\n  repeat: -1\n}], [\"stand\", {\n  key: \"idle\",\n  frameRate: 2,\n  repeat: -1\n}], [\"glide\", {\n  key: \"flap_nomove\",\n  repeat: -1\n}], [\"fall\", {\n  key: \"noflap_nomove\",\n  repeat: -1\n}], [\"drift\", {\n  key: \"noflap_move\",\n  repeat: -1\n}], [\"dive\", {\n  key: \"dive\",\n  repeat: -1\n}], [\"swoop\", {\n  key: \"flap_move\",\n  repeat: -1\n}]]);\nconst PIGEON_STATE_MOVEMENT = new Map([[\"walk\", walk], [\"stand\", stand], [\"drift\", drift], [\"glide\", glide], [\"dive\", dive], [\"swoop\", swoop]]);\nvar pigeonsMap = new Map();\n\n//computer controlled pigeon actions feat spaghetti\n\nfunction pigeonThink(dummy, delta) {\n  let newMode;\n  let sprite = dummy.object;\n  if (dummy.object.onPerch && !dummy.object.body.onFloor()) {\n    dummy.object.onPerch = false;\n  }\n  let descisions;\n  if (dummy.independent) {\n    descisions = roam(dummy);\n  } else {\n    let seenPigeons = seeOtherPigeons(dummy); //list of observed pigeons\n    descisions = flock(dummy, seenPigeons); //sets movement booleans to stay with flock\n  }\n\n  sprite.body.setDrag(sprite.body.velocity.y > 0 ? 0 : LIFT_DRAG);\n\n  //descisions holds  list of values\n  let special = descisions[0];\n  let flip = descisions[1];\n  let leaning = descisions[2];\n  let wings = descisions[3];\n  if (flip != sprite.flipX) {\n    sprite.body.setVelocityX(pigeon.body.velocity.x / 2);\n  }\n  sprite.flipX = flip;\n\n  //flip if on world edge\n  if (sprite.body.position.x <= 100) {\n    sprite.flipX = false;\n  }\n  if (sprite.body.position.x >= SCENE_WIDTH - 100) {\n    sprite.flipX = true;\n  }\n  if (dummy.freezeFrame >= FLAP_CONST) {\n    //animation timer tied to robo_pigeon\n    if (dummy.flapCompleted) {\n      //boolean for anim timer flapping\n      if (sprite.body.onFloor()) {\n        //choose correct behavior based off of descisions list\n        if (leaning) {\n          newMode = \"walk\";\n        } else {\n          newMode = \"stand\";\n        }\n      } else if (special == 0) {\n        if (wings) {\n          if (leaning) {\n            newMode = \"swoop\";\n          } else {\n            newMode = \"glide\";\n          }\n        } else if (leaning) {\n          newMode = \"drift\";\n        } else {\n          newMode = \"fall\";\n        }\n      } else {\n        if (leaning) {\n          newMode = \"glide\";\n        } else {\n          newMode = \"swoop\";\n        }\n      }\n      if (newMode != dummy.mode) {\n        dummy.mode = newMode;\n        sprite.play(PIGEON_STATE_ANIMATIONS.get(dummy.mode));\n      }\n      if (special == 0) {\n        if (dummy.mode != \"fall\") {\n          PIGEON_STATE_MOVEMENT.get(dummy.mode)(sprite);\n        }\n      } else if (special == \"flap\") {\n        if (dummy.independent || dummy.following.onPerch || dummy.onPerch) {\n          if (leaning) {\n            flapMove(sprite);\n          } else {\n            flapNoMove(sprite);\n          }\n        } else {\n          roboFlap(sprite, descisions[4], descisions[5]);\n        }\n        flap = false;\n        dummy.flapCompleted = false;\n        dummy.freezeFrame = 0;\n      } else if (special == \"dive\") {\n        dive(sprite);\n        sprite.play(PIGEON_STATE_ANIMATIONS.get(\"dive\"));\n      }\n    } else {\n      dummy.freezeFrame = 0;\n      dummy.flapCompleted = true;\n      if (leaning) {\n        dummy.mode = \"drift\";\n      } else {\n        dummy.mode = \"fall\";\n      }\n    }\n  } else {\n    sprite.play(PIGEON_STATE_ANIMATIONS.get(dummy.mode));\n  }\n  dummy.freezeFrame += delta;\n  if (sprite.body.velocity.y > 150 || special == \"dive\") {\n    sprite.body.checkCollision.down = false;\n  } else {\n    sprite.body.checkCollision.down = true;\n  }\n}\nfunction seeOtherPigeons(observer) {\n  let body1 = observer.object.body;\n  let seenPigeons = [];\n  let indiePigeons = [];\n  for (agent of pigeonAgents) {\n    if (agent.object == observer.object) {\n      continue;\n    }\n    let body2 = agent.object.body;\n    if (Phaser.Math.Distance.Between(body1.position.x, body1.position.y, body2.position.x, body2.position.y) <= observedRadius) {\n      if (agent.independent) {\n        indiePigeons.push(agent.object);\n      } else {\n        seenPigeons.push(agent.object);\n      }\n    }\n  }\n  if (seenPigeons.length > MAX_FLOCK) {\n    if (seenPigeons.length < observer.slicer + MAX_FLOCK) {\n      observer.slicer = generateRandomBetween(-1, seenPigeons.length - MAX_FLOCK + 1);\n      seenPigeons = seenPigeons.slice(observer.slicer, observer.slicer + MAX_FLOCK);\n    } else {\n      seenPigeons = seenPigeons.slice(observer.slicer, observer.slicer + MAX_FLOCK);\n    }\n  }\n  if (follow_bool) {\n    if (Phaser.Math.Distance.Between(body1.position.x, body1.position.y, pigeon.body.position.x, pigeon.body.position.y) <= observedRadius) {\n      observer.following = pigeon;\n    } else if (observer.following == pigeon) {\n      observer.following = -1;\n    }\n  } else if (observer.following == pigeon) {\n    observer.following = -1;\n  }\n  if (observer.following != pigeon && !indiePigeons.includes(observer.following)) {\n    if (indiePigeons.length > 0) {\n      let rando = generateRandomBetween(-1, indiePigeons.length);\n      observer.following = indiePigeons[rando];\n    } else {\n      observer.following = -1;\n    }\n  }\n  if (observer.following != -1) {\n    for (i = 0; i < LEADING_WEIGHT; i++) {\n      seenPigeons.push(observer.following);\n    }\n  }\n  return seenPigeons;\n}\nfunction flock(member, pigeonGroup) {\n  let averagePosX = 0;\n  let averagePosY = 0;\n  let averageVelX = 0;\n  let averageVelY = 0;\n  let body = member.object.body;\n  let minPosX = body.position.x;\n  let maxPosX = body.position.x;\n  for (agent of pigeonGroup) {\n    if (agent == member.object) {\n      continue;\n    }\n    let body2 = agent.body;\n    averageVelX += body2.velocity.x;\n    averageVelY += body2.velocity.y;\n    averagePosX += body2.position.x;\n    averagePosY += body2.position.y;\n    if (body2.position.x > maxPosX) {\n      maxPosX = body2.position.x;\n    } else if (body2.position.x < minPosX) {\n      minPosX = body2.position.x;\n    }\n  }\n  minPosX = minPosX < 100 ? 100 : minPosX;\n  maxPosX = maxPosX > SCENE_WIDTH - 100 ? SCENE_WIDTH - 100 : maxPosX;\n  if (minPosX > maxPosX) {\n    if (minPosX == 100) {\n      maxPosX = minPosX + 25;\n    } else {\n      minPosX = maxPosX - 25;\n    }\n  }\n  averageVelX = averageVelX / pigeonGroup.length;\n  averageVelY = averageVelY / pigeonGroup.length;\n  averagePosX = averagePosX / pigeonGroup.length;\n  averagePosY = averagePosY / pigeonGroup.length;\n  if (body.onFloor()) {\n    return walkFlock(member, averagePosX, averagePosY, minPosX, maxPosX);\n  } else {\n    return flapFlock(member, averagePosX, averagePosY, averageVelX, averageVelY);\n  }\n}\nfunction walkFlock(member, averagePosX, averagePosY, minPosX, maxPosX) {\n  let wings;\n  let leaning;\n  let flip;\n  let specialCase = 0;\n  let body = member.object.body;\n  if (member.object.onPerch) {\n    let perch = member.object.currPerch;\n    minPosX = perch.body.position.x;\n    maxPosX = perch.body.width + perch.body.position.x;\n  }\n  let range = maxPosX - minPosX;\n  if (member.justLanded) {\n    member.object.body.setVelocity(0, 0);\n    member.target.pos = generateRandomBetween(minPosX, maxPosX);\n    member.justLanded = false;\n  }\n  flip = member.target.pos < body.position.x;\n  if (Math.abs(member.target.pos - body.position.x) > 1) {\n    leaning = true;\n  } else {\n    if (generateRandomBetween(0, 1000) < 10) {\n      if (member.object.onPerch) {\n        member.target.pos = generateRandomBetween(minPosX, maxPosX);\n      } else {\n        let dir;\n        if (body.position.x - range < 100) {\n          dir = 1;\n        } else if (body.position.x + range > SCENE_WIDTH - 100) {\n          dir = -1;\n        } else if (Math.abs(body.position.x - averagePosX) > 25) {\n          dir = averagePosX < body.position.x ? 1 : -1;\n        } else {\n          dir = body.position.x < SCENE_WIDTH / 2 ? 1 : -1;\n        }\n        member.target.pos = member.object.body.position.x + range * dir;\n      }\n    }\n  }\n  let posDifVector;\n  if (member.following == -1) {\n    if (body.position.y - averagePosY > 50) {\n      specialCase = \"flap\";\n      member.justLanded = false;\n    } else if (body.position.y - averagePosY < -200) {\n      specialCase = \"dive\";\n      member.justLanded = false;\n      member.object.y += 5;\n    } else if (Math.abs(body.position.x - averagePosX) > range / 2) {\n      leaning = true;\n      flip = body.position.x > averagePosX ? true : false;\n    }\n    posDifVector = {\n      x: averagePosX - body.position.x,\n      y: averagePosY - body.position.y\n    };\n  } else {\n    let lead = member.following.body.position;\n    if (body.position.y - lead.y > 50) {\n      specialCase = \"flap\";\n      member.justLanded = false;\n    } else if (body.position.y - lead.y < -200) {\n      specialCase = \"dive\";\n      member.justLanded = false;\n      member.object.y += 5;\n    } else if (Math.abs(body.position.x - lead.x) > range / 2) {\n      leaning = true;\n      flip = body.position.x > lead.x ? true : false;\n    }\n    posDifVector = {\n      x: averagePosX - body.position.x,\n      y: averagePosY - body.position.y\n    };\n  }\n  return [specialCase, flip, leaning, wings, posDifVector, {\n    x: 0,\n    y: 0\n  }];\n}\nfunction flapFlock(member, averagePosX, averagePosY, averageVelX, averageVelY) {\n  let wings = false;\n  let leaning;\n  let flip = member.object.flipX;\n  averagePosX += member.noise.x;\n  averagePosY += member.noise.y;\n  let specialCase = 0;\n  let body = member.object.body;\n  let velocity = Object.assign({}, body.velocity);\n  let posDifVector = {\n    x: averagePosX - body.position.x,\n    y: averagePosY - body.position.y\n  };\n  let velDifVector = {\n    x: averageVelX - velocity.x,\n    y: averageVelY - velocity.y\n  };\n  if (member.following.onPerch) {\n    let targetPerch = member.following.currPerch;\n    let targetPos = Object.assign({}, targetPerch.body.position);\n    if (Math.abs(member.noise.x) > targetPerch.body.width / 2 - targetPerch.body.width / 8) {\n      member.noise.x = generateWalkableNoise(targetPerch) * randomDirection();\n    }\n    targetPos.x += member.noise.x + targetPerch.body.width / 2;\n    targetPos.y -= PIGEON_DIMENSIONS.height;\n    if (Math.abs(body.position.x - targetPos.x) < PIGEON_DIMENSIONS.width + targetPerch.body.width / 8) {\n      if (body.position.y < targetPos.y - PIGEON_DIMENSIONS.height) {\n        leaning = false;\n        if (velocity.y > 150) {\n          specialCase = \"flap\";\n        }\n        if (targetPos.y - body.position.y < 25 && Math.abs(targetPos.x - body.position.x) < 15) {\n          wings = false;\n        }\n      } else {\n        specialCase = \"flap\";\n        leaning = false;\n        console.log(\"please\");\n      }\n    } else {\n      flip = body.position.x > targetPos.x + PIGEON_DIMENSIONS.width / 2;\n      flip = Math.abs(targetPos.x - body.position.x) > 25 ? flip : member.object.flipX;\n      leaning = Math.abs(body.position.x - targetPos.x) < 50 ? false : true;\n      if (targetPos.y < body.position.y) {\n        if (body.velocity.y > -75) {\n          specialCase = \"flap\";\n        } else {\n          wings = true;\n        }\n      } else {\n        if (Math.abs(body.position.y - targetPos.y) > 500) {\n          specialCase = \"dive\";\n        } else {\n          wings = Math.abs(body.position.y - targetPos.y) > 50 ? false : true;\n        }\n      }\n    }\n  } else {\n    if (Math.abs(averageVelX) > 10) {\n      flip = averageVelX < 0;\n    } else if (Math.abs(averagePosX - body.position.x) > 45) {\n      flip = averagePosX < body.position.x;\n    }\n\n    //directly change x velocity\n    if (posDifVector.x * (flip ? -1 : 1) > 200 || velDifVector.x * (flip ? -1 : 1) > 75) {\n      specialCase = \"flap\";\n    } else if (posDifVector.x * (flip ? -1 : 1) > 50) {\n      leaning = true;\n    } else {\n      leaning = false;\n    }\n    if (averagePosY < body.position.y) {\n      if (Math.abs(posDifVector.y) > 50) {\n        specialCase = \"flap\";\n      } else if (averageVelY < 0) {\n        if (velocity.y > 0) {\n          specialCase = \"flap\";\n        } else if (Math.abs(averageVelY) - Math.abs(velocity.y) > 50) {\n          specialCase = \"flap\";\n        }\n      } else {\n        wings = true;\n      }\n    } else if (Math.abs(posDifVector.y) < 100) {\n      wings = true;\n    } else {\n      wings = false;\n      if (Math.abs(posDifVector.y) > 200) {\n        specialCase = \"dive\";\n      }\n    }\n    if (Phaser.Math.Distance.Between(body.position.x, body.position.y, averagePosX, averagePosY) <= 50) {\n      member.noise.x = generateNoisy(FLOCK_NOISE);\n      member.noise.y = generateNoisy(FLOCK_NOISE);\n    }\n  }\n  if (specialCase == \"flap\") {\n    if (posDifVector.y > 0) {\n      leaning = true;\n    } else if (posDifVector * (flip ? -1 : 1) < 0) {\n      leaning = false;\n    } else {\n      leaning = Math.abs(posDifVector.x) > Math.abs(posDifVector.y) ? true : false;\n    }\n  }\n  return [specialCase, flip, leaning, wings, posDifVector, velDifVector];\n}\nfunction generateWalkableNoise(perch) {\n  newNoise = generateNoisy(perch.body.width / 2 - perch.body.width / 8);\n  return newNoise;\n}\nfunction roam(member) {\n  let sprite = member.object;\n  let body = sprite.body;\n  let position = body.position;\n  let wings;\n  let leaning;\n  let flip;\n  let specialCase = 0;\n  let targetPos = member.target.pos;\n  let targetPerch = member.target.perch;\n  if (Phaser.Math.Distance.Between(position.x, position.y, targetPos.x, targetPos.y) < 75 && targetPos.y > position.y || body.onFloor()) {\n    return land(member);\n  } else {\n    flip = targetPos.x > position.x ? false : true;\n    flip = Math.abs(targetPos.x - position.x) < targetPerch.body.width / 8 ? sprite.flipX : flip;\n    leaning = Math.abs(position.x - targetPos.x) < 50 ? false : true;\n    if (targetPos.y < position.y) {\n      if (body.velocity.y > -75) {\n        specialCase = \"flap\";\n      } else {\n        wings = true;\n      }\n    } else {\n      if (Math.abs(position.y - targetPos.y) > 500) {\n        specialCase = \"dive\";\n      } else {\n        wings = Math.abs(position.y - targetPos.y) > 50 ? false : true;\n      }\n    }\n    return [specialCase, flip, leaning, wings];\n  }\n}\nfunction land(dummy) {\n  let wings = true;\n  let specialCase = 0;\n  let flip = dummy.object.flipX;\n  let leaning = false;\n  if (dummy.object.body.onFloor()) {\n    if (dummy.target.perch == dummy.object.currPerch) {\n      if (Math.abs(dummy.object.body.position.x - dummy.target.pos.x) > 5) {\n        flip = dummy.target.pos.x > dummy.object.body.position.x ? false : true;\n        leaning = true;\n      } else if (generateRandomBetween(-1, 1000) < 10) {\n        let targeting = generateRoamTarget(dummy.noise.x);\n        dummy.noise.x = targeting[1];\n        dummy.target = targeting[0];\n      }\n    } else {\n      let targetBelow = dummy.object.body.position.y > dummy.target.pos.y ? false : true;\n      let greaterDistance = Math.abs(dummy.object.body.position.y - dummy.target.pos.y) > Math.abs(dummy.object.body.position.x - dummy.target.pos.x) ? 'y' : 'x';\n      flip = dummy.object.body.position.x < dummy.target.pos.x ? false : true;\n      if (greaterDistance == 'x') {\n        leaning = true;\n      } else {\n        if (targetBelow) {\n          specialCase = \"dive\";\n          dummy.object.y += 5;\n        } else {\n          specialCase = \"flap\";\n        }\n      }\n    }\n  } else {\n    if (dummy.object.body.velocity.y > 150) {\n      specialCase = \"flap\";\n    }\n    if (dummy.target.pos.y - dummy.object.body.position.y < 5 && Math.abs(dummy.target.pos.x - dummy.object.body.position.x) < 5) {\n      wings = false;\n    }\n  }\n  return [specialCase, flip, leaning, wings];\n}\nfunction generateRoamTarget(noiseX) {\n  let perchTarget = 0;\n  let xPos;\n  let yPos;\n  let newNoise;\n  perchTarget = generateRandomBetween(-1, perches.length);\n  perchTarget = perches[perchTarget];\n  xPos = perchTarget.body.position.x + perchTarget.body.width / 2;\n  yPos = perchTarget.body.position.y - 25;\n  newNoise = generateNoisy(perchTarget.body.width / 2 - perchTarget.body.width / 8);\n  noiseX = newNoise;\n  return [{\n    pos: {\n      x: xPos + noiseX,\n      y: yPos\n    },\n    perch: perchTarget\n  }, newNoise];\n}\nfunction generateNoisy(num) {\n  let rand = generateRandomBetween(0, num + 1);\n  return rand * randomDirection();\n}\nfunction generateRandomBetween(min, max) {\n  let range = max - min - 1;\n  let rando = Math.floor(Math.random() * range);\n  return rando + min + 1;\n}\nfunction randomDirection() {\n  let rando = Math.floor(Math.random() * 2) - 1;\n  return rando == 0 ? -1 : 1;\n}\nfunction getNewMode(lastMode, isGrounded, keys) {\n  if (isGrounded) {\n    if (left.isDown || right.isDown) {\n      return \"walk\";\n    } else if (pigeon.onPerch && down.isDown) {\n      return \"dive\";\n    } else {\n      return \"stand\";\n    }\n  } else {\n    if (keys.space.isDown) {\n      if (left.isDown || right.isDown) {\n        return \"swoop\";\n      } else {\n        return \"glide\";\n      }\n    } else {\n      if (left.isDown || right.isDown) {\n        return \"drift\";\n      } else if (down.isDown) {\n        return \"dive\";\n      } else {\n        return \"fall\";\n      }\n    }\n  }\n}\nconst Mingle = () => {\n  return /*#__PURE__*/_jsxDEV(IonPhaser, {\n    game: game\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1279,\n    columnNumber: 9\n  }, this);\n};\n_c = Mingle;\nexport default Mingle;\nvar _c;\n$RefreshReg$(_c, \"Mingle\");","map":{"version":3,"names":["IonPhaser","config","type","Phaser","AUTO","width","height","physics","default","arcade","debug","gravity","y","pixelArt","antialias","autoRound","roundPixels","backgroundColor","inputKeyboard","scene","preload","create","update","space","left","right","down","j","k","l","follow_bool","toggle_follow","game","Game","Main","SCENE_WIDTH","SCENE_HEIGHT","pigeon","pigeonSound","back","mid","fore","splashScreen","squawkImg","lastSampleTime","onGround","pigeonAgents","observedRadius","perches","businessMen","MAX_VELOCITY","x","DRAG_X","LIFT_DRAG","BODY_OFFSET","MAX_FLOCK","PIGEON_DIMENSIONS","FLOCK_NOISE","LEADING_WEIGHT","FLAP_CONST","load","aseprite","image","audio","player_layer","add","layer","setDepth","pigeon_layer","man_layer","prop_layer","building_layer","bg_layer","world","setBounds","cameras","main","setSize","setScrollFactor","setScale","input","keyboard","addKey","Input","Keyboard","KeyCodes","SPACE","A","D","S","J","K","L","tags","anims","createFromAseprite","manTages","sprite","play","key","frameRate","repeat","setCollideWorldBounds","body","setOffset","setMaxVelocity","allowDrag","setDamping","setDragX","checkCollision","up","onPerch","currPerch","startFollow","setDeadzone","window","makePigeon","robo_pigeon","position","prop","collider","push","object","flapCompleted","mode","freezeFrame","noise","generateNoisy","target","justLanded","slice","independent","following","makeIndependentPigeon","setDrag","noises","newTarget","generateRoamTarget","makeBench","bench","staticSprite","offsetX","agent","currAgent","makeLamp","lamp","makeBusinessMan","man","facing","randomDirection","setAllowGravity","togglePerch","entity","bool","drawGizmo","gizmo","drawMap","buildingLayer","propLayer","makeBuilding","yOffset","topPerch","addSills","addRailings","xOffset","i","addRailing","railing","addTopSillRow","addBottomSillRow","obscured","sills","secondSill","fourthSill","sill","currSill","firstSill","thirdSill","lastState","direction","time","delta","JustDown","isGrounded","onFloor","setDragY","velocity","getNewMode","flipX","setVelocityX","PIGEON_STATE_ANIMATIONS","get","sawFlap","isDown","flapMove","flapNoMove","stand","walk","drift","dive","glide","swoop","pigeonThink","businessManLogic","setVelocity","setVelocityY","roboFlap","posDifVector","velDifVector","Math","abs","Map","PIGEON_STATE_MOVEMENT","pigeonsMap","dummy","newMode","descisions","roam","seenPigeons","seeOtherPigeons","flock","special","flip","leaning","wings","flap","observer","body1","indiePigeons","body2","Distance","Between","length","slicer","generateRandomBetween","includes","rando","member","pigeonGroup","averagePosX","averagePosY","averageVelX","averageVelY","minPosX","maxPosX","walkFlock","flapFlock","specialCase","perch","range","pos","dir","lead","Object","assign","targetPerch","targetPos","generateWalkableNoise","console","log","newNoise","land","targeting","targetBelow","greaterDistance","noiseX","perchTarget","xPos","yPos","num","rand","min","max","floor","random","lastMode","keys","Mingle"],"sources":["/Users/owen/dev/sitemk2test/reactive_site/src/pigeonMingle/game.js"],"sourcesContent":["import { IonPhaser } from \"@ion-phaser/core\";\n\nvar config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 750,\n    physics: {\n        default: \"arcade\",\n        arcade: {\n            debug: false,\n            gravity: { y: 100 },\n        },\n    },\n    pixelArt: true,\n    antialias: false,\n    autoRound: true,\n    roundPixels: true,\n    backgroundColor: \"#FFFF00\",\n    inputKeyboard: true,\n    scene: {\n        preload: preload,\n        create: create,\n        update: update,\n    },\n};\n\n//global variables dont @me\nvar space;\nvar left;\nvar right;\nvar down;\nvar j;\nvar k;\nvar l;\nvar follow_bool = true;\n\nfunction toggle_follow() {\n    follow_bool = !follow_bool;\n}\n\nvar game = new Phaser.Game(config),\n    Main = function () {};\nconst SCENE_WIDTH = 3200;\nconst SCENE_HEIGHT = 2000;\n\nvar pigeon;\nvar pigeonSound;\nvar back;\nvar mid;\nvar fore;\nvar splashScreen;\nvar squawkImg;\n\nvar lastSampleTime = 0;\nvar onGround = true;\nvar pigeonAgents = []; //list of computer pigeons\nvar observedRadius = 550; //distance computer pigeons can see\nvar perches = [];\nvar businessMen = [];\n\nconst MAX_VELOCITY = { x: 300, y: 300 };\nconst DRAG_X = 0.85;\nconst LIFT_DRAG = 0.5;\nconst BODY_OFFSET = { x: 3, y: 1 };\nconst MAX_FLOCK = 2;\nconst PIGEON_DIMENSIONS = { width: 7, height: 11 };\nconst FLOCK_NOISE = 100;\nconst LEADING_WEIGHT = 2;\nconst FLAP_CONST = 100;\n\n//preload fetches assets and stuff\nfunction preload() {\n    this.load.aseprite(\n        \"pigeon\",\n        \"/art_assets/pigeon16by.png\",\n        \"/art_assets/pigeon16by.json\"\n    );\n    this.load.image(\"ground\", \"/art_assets/placeholder_ground.png\");\n    this.load.audio(\"pigeonNoise\", [\"/pigeon_sound.mp3\"]);\n\n    this.load.image(\"sky\", \"/art_assets/bg_skyline.png\");\n    this.load.image(\"back\", \"/art_assets/bg_back.png\");\n    this.load.image(\"mid\", \"/art_assets/bg_mid.png\");\n    this.load.image(\"fore\", \"/art_assets/bg_fore.png\");\n\n    this.load.image(\"park\", \"/art_assets/park.png\");\n\n    this.load.image(\"squawkImg\", \"/art_assets/squawk.png\");\n\n    this.load.image(\"splashScreen\", \"/art_assets/pigeonSplashScreen.png\");\n    this.load.image(\"bench\", \"/art_assets/bench.png\");\n    this.load.image(\"gizmo\", \"/art_assets/gizmo.png\");\n    this.load.image(\"lamp\", \"/art_assets/lamp.png\");\n    \n    this.load.image(\"redBrickBuilding\", \"/art_assets/red_brick_building.png\");\n    this.load.image(\"empty\", \"/art_assets/empty.png\");\n\n    this.load.aseprite(\"businessMan\",\"/art_assets/bizniz_man.png\",\"/art_assets/bizniz_man.json\");\n}\n\n//create loads assets into scene\nfunction create() {\n    const player_layer = this.add.layer().setDepth(5);\n    const pigeon_layer = this.add.layer().setDepth(4);\n    const man_layer = this.add.layer().setDepth(3);\n    const prop_layer = this.add.layer().setDepth(2);\n    const building_layer = this.add.layer().setDepth(1);\n    const bg_layer = this.add.layer().setDepth(0);\n\n    //prep scene\n    this.physics.world.setBounds(\n        0,\n        0,\n        SCENE_WIDTH,\n        SCENE_HEIGHT,\n        true,\n        true,\n        true,\n        true\n    );\n    this.cameras.main.setSize(800, 750);\n\n    //add art and sound\n    bg_layer.add(this.add.image(800, 400, \"sky\").setScrollFactor(0.15).setScale(10, 10));\n\n    /*\n    back = this.add.image(0,800,'back')\n        .setOrigin(0,1)\n        .setScrollFactor(.25)\n        .setScale(10,10);\n\n    mid = this.add.image(0,800,'mid')\n        .setOrigin(0,1)\n        .setScrollFactor(.5)\n        .setScale(10,10);\n\n    fore = this.add.image(0,820,'fore')\n        .setOrigin(0,1)\n        .setScrollFactor(.75)\n        .setScale(10,10);\n\n*/\n    bg_layer.add(this.add.image(1600, 1300, \"park\").setScale(10, 10));\n\n//    splashScreen = this.add.image(400, 500, \"splashScreen\");\n\n    //pigeonSound = this.sound.add('pigeonNoise',{loop:false});\n\n    //bind keys\n    space = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\n    left = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);\n    right = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);\n    down = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);\n    j = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.J);\n    k = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.K);\n    l = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.L);\n\n    var tags = this.anims.createFromAseprite(\"pigeon\");\n    var manTages = this.anims.createFromAseprite(\"businessMan\");\n\n    //player is created\n    pigeon = this.physics.add\n        .sprite(100, 100,\"pigeon\")\n        .play({ key: \"idle\", frameRate: 2, repeat: -1 })\n        .setScale(3);\n    pigeon.setCollideWorldBounds(true);\n    pigeon.body.setSize(\n        PIGEON_DIMENSIONS.width,\n        PIGEON_DIMENSIONS.height,\n        true\n    );\n    pigeon.body.setOffset(BODY_OFFSET.x, BODY_OFFSET.y);\n    pigeon.body.setMaxVelocity(MAX_VELOCITY.x, MAX_VELOCITY.y);\n    pigeon.body.allowDrag = true;\n    pigeon.setDamping(true);\n    pigeon.body.setDragX(DRAG_X);\n    pigeon.body.checkCollision.up = false;\n    pigeon.body.checkCollision.left = false;\n    pigeon.body.checkCollision.right = false;\n    pigeon.onPerch = false;\n    pigeon.currPerch = 0;\n    player_layer.add(pigeon);\n\n    //jank ass start screen\n//    this.input.once(\n//        \"pointerdown\",\n//        function (event) {\n//            splashScreen.destroy();\n//\n            this.cameras.main\n                .setBounds(0, 0, SCENE_WIDTH, SCENE_HEIGHT, true)\n                .startFollow(pigeon)\n                .setDeadzone(0, 0);\n//        },\n//        this\n//    );\n\n    const game = this;\n\n    //make pigeon function creates computer controlled pigeons\n    window.makePigeon = function () {\n        let robo_pigeon = game.physics.add\n            .sprite(pigeon.body.position.x, pigeon.body.position.y,\"pigeon\")\n            .play({ key: \"idle\", frameRate: 2, repeat: -1 })\n            .setScale(3);\n        robo_pigeon.setCollideWorldBounds(true);\n        robo_pigeon.body.setSize(\n            PIGEON_DIMENSIONS.width,\n            PIGEON_DIMENSIONS.height,\n            true\n        );\n        robo_pigeon.setOffset(BODY_OFFSET.x, BODY_OFFSET.y);\n        robo_pigeon.body.setMaxVelocity(MAX_VELOCITY.x, MAX_VELOCITY.y);\n        robo_pigeon.body.allowDrag = true;\n        robo_pigeon.setDamping(true);\n        robo_pigeon.body.checkCollision.up = false;\n        robo_pigeon.body.checkCollision.left = false;\n        robo_pigeon.body.checkCollision.right = false;\n        robo_pigeon.body.setDragX(DRAG_X);\n        robo_pigeon.onPerch = false;\n        robo_pigeon.currPerch = 0;\n        pigeon_layer.add(robo_pigeon);\n\n        for (let prop of perches) {\n            game.physics.add.collider(robo_pigeon, prop, function () {\n                robo_pigeon.onPerch = true;\n                robo_pigeon.currPerch = prop;\n            });\n        }\n        pigeonAgents.push({\n            object: robo_pigeon,\n            flapCompleted: true,\n            mode: \"stand\",\n            freezeFrame: 0,\n            noise: {\n                x: generateNoisy(FLOCK_NOISE),\n                y: generateNoisy(FLOCK_NOISE),\n            },\n            target: 0,\n            justLanded: true,\n            slice: 0,\n            independent: false,\n            following: -1,\n        });\n    };\n    window.makeIndependentPigeon = function () {\n        let robo_pigeon = game.physics.add\n            .sprite(100, 100,\"pigeon\")\n            .play({ key: \"idle\", frameRate: 2, repeat: -1 })\n            .setScale(3);\n        robo_pigeon.setCollideWorldBounds(true);\n        robo_pigeon.body.setSize(\n            PIGEON_DIMENSIONS.width,\n            PIGEON_DIMENSIONS.height,\n            true\n        );\n        robo_pigeon.setOffset(BODY_OFFSET.x, BODY_OFFSET.y);\n        robo_pigeon.body.setMaxVelocity(MAX_VELOCITY.x, MAX_VELOCITY.y);\n        robo_pigeon.body.allowDrag = true;\n        robo_pigeon.setDamping(true);\n        robo_pigeon.body.checkCollision.up = false;\n        robo_pigeon.body.checkCollision.left = false;\n        robo_pigeon.body.checkCollision.right = false;\n        robo_pigeon.body.setDrag(DRAG_X);\n        robo_pigeon.onPerch = false;\n        robo_pigeon.currPerch = 0;\n        pigeon_layer.add(robo_pigeon);\n\n        for (let prop of perches) {\n            game.physics.add.collider(robo_pigeon, prop, function () {\n                robo_pigeon.onPerch = true;\n                robo_pigeon.currPerch = prop;\n            });\n        }\n        let noises = {\n            x: generateNoisy(FLOCK_NOISE),\n            y: generateNoisy(FLOCK_NOISE),\n        };\n        let newTarget = generateRoamTarget(noises.x);\n        noises.x = newTarget[1];\n        pigeonAgents.push({\n            object: robo_pigeon,\n            flapCompleted: true,\n            mode: \"stand\",\n            freezeFrame: 0,\n            noise: noises,\n            target: newTarget[0],\n            justLanded: false,\n            slice: 0,\n            independent: true,\n            following: -1,\n        });\n    };\n    window.makeBench = function () {\n        let bench = game.physics.add.staticSprite(\n            pigeon.body.position.x,\n            pigeon.body.position.y,\n            \"bench\"\n        );\n        bench.offsetX = 9;\n        bench.body.setSize(174, 5, true).setOffset(bench.offsetX, 0);\n        perches.push(bench);\n        prop_layer.add(bench);\n        game.physics.add.collider(pigeon, bench, function () {\n            pigeon.onPerch = true;\n            pigeon.currPerch = bench;\n        });\n        for (agent of pigeonAgents) {\n            let currAgent = agent;\n            game.physics.add.collider(agent.object, bench, function () {\n                currAgent.object.onPerch = true;\n                currAgent.object.currPerch = bench;\n            });\n        }\n    };\n\n    window.makeLamp = function () {\n        let lamp = game.physics.add.staticSprite(\n            pigeon.body.position.x,\n            pigeon.body.position.y,\n            \"lamp\"\n        );\n        lamp.offsetX = 10;\n        lamp.body.setSize(30, 5, true).setOffset(lamp.offsetX, 10);\n        perches.push(lamp);\n        prop_layer.add(lamp);\n        game.physics.add.collider(pigeon, lamp, function () {\n            pigeon.onPerch = true;\n            pigeon.currPerch = lamp;\n        });\n        for (agent of pigeonAgents) {\n            let currAgent = agent;\n            game.physics.add.collider(agent.object, lamp, function () {\n                currAgent.object.onPerch = true;\n                currAgent.object.currPerch = lamp;\n            });\n        }\n    };\n\n    window.makeBusinessMan = function () {\n        let man = game.physics.add.sprite(pigeon.body.position.x, SCENE_HEIGHT - 96,\"businessMan\")\n            .play({ key: \"man_walk\", frameRate: 2, repeat: -1 })\n            .setScale(3);\n        man.facing = randomDirection();\n        man.body.setAllowGravity(false);\n        businessMen.push(man);\n        man_layer.add(man);\n    }\n\n    window.togglePerch = function (entity, bool) {\n        entity.onPerch = bool;\n    };\n\n    window.drawGizmo = function({x,y}){\n        let gizmo = game.add.sprite(x,y,\"gizmo\");\n        player_layer.add(gizmo);\n        return({x,y});\n    }\n\n    //--------------------\n    drawMap(this, building_layer, prop_layer);\n}\n\nfunction drawMap(game, buildingLayer, propLayer){\n    makeBuilding(game,buildingLayer,500);\n}\n\nfunction makeBuilding(game, buildingLayer, x){\n    let yOffset = 750\n    let topPerch = game.physics.add.staticSprite(x, SCENE_HEIGHT - yOffset, \"redBrickBuilding\");\n    topPerch.body.setSize(topPerch.body.width, 5).setOffset(0,0);\n    buildingLayer.add(topPerch);\n    perches.push(topPerch);\n    game.physics.add.collider(pigeon, topPerch, function () {\n        pigeon.onPerch = true;\n        pigeon.currPerch = topPerch;\n    });\n    for (agent of pigeonAgents) {\n        let currAgent = agent;\n        game.physics.add.collider(agent.object, topPerch, function () {\n            currAgent.object.onPerch = true;\n            currAgent.object.currPerch = topPerch;\n        });\n    }\n    addSills(game, x, yOffset);\n    addRailings(game, x, yOffset);\n}\nfunction addRailings(game, x, yOffset){\n    let xOffset = x + 11;\n    yOffset = SCENE_HEIGHT - yOffset + 310;\n    for(let i = 0; i<3; i++){\n        addRailing(game, xOffset, yOffset - (i*320));\n    }\n}\n\nfunction addRailing(game, x, yOffset){\n    let railing = game.physics.add.staticSprite(x, yOffset,\"empty\");\n    railing.body.setSize(435,5);\n    perches.push(railing);\n    game.physics.add.collider(pigeon, railing, function () {\n        pigeon.onPerch = true;\n        pigeon.currPerch = railing;\n    });\n    for (agent of pigeonAgents) {\n        let currAgent = agent;\n        game.physics.add.collider(agent.object, railing, function () {\n            currAgent.object.onPerch = true;\n            currAgent.object.currPerch = railing;\n        });\n    }\n}\n\nfunction addSills(game, x, yOffset){\n    yOffset += 497;\n    for(let i = 0; i<3; i++){\n        addTopSillRow(game,x,yOffset - (i * 322), i != 0);\n        addBottomSillRow(game,x,yOffset - (i * 322), i != 0);\n    }\n}\nfunction addBottomSillRow(game, x, yOffset, obscured){\n    let sills = [];\n    let xOffset = x - 340;\n    yOffset = SCENE_HEIGHT - yOffset+215;\n    let secondSill = game.physics.add.staticSprite(xOffset, yOffset,\"empty\");\n    sills[0] = secondSill;\n    xOffset = x + 340;\n    let fourthSill = game.physics.add.staticSprite(xOffset, yOffset,\"empty\");\n    sills[1] = fourthSill;\n    for(sill of sills){\n        let currSill = sill;\n        currSill.body.setSize(125,5);\n        perches.push(sill);\n        game.physics.add.collider(pigeon, currSill, function () {\n            pigeon.onPerch = true;\n            pigeon.currPerch = currSill;\n        });\n        for (agent of pigeonAgents) {\n            let currAgent = agent;\n            game.physics.add.collider(agent.object, currSill, function () {\n                currAgent.object.onPerch = true;\n                currAgent.object.currPerch = currSill;\n            });\n        }\n    }\n}\n\nfunction addTopSillRow(game,x,yOffset,obscured){\n    let sills = [];\n    let xOffset = x - 117;\n    yOffset = SCENE_HEIGHT - yOffset ;\n    if(!obscured){\n        let firstSill = game.physics.add.staticSprite(xOffset, yOffset,\"empty\");\n        sills[3] = firstSill;\n   }\n    xOffset -= 223;\n    let secondSill = game.physics.add.staticSprite(xOffset, yOffset,\"empty\");\n    sills[0] = secondSill;\n    \n    xOffset = x + 117;\n    let thirdSill = game.physics.add.staticSprite(xOffset, yOffset,\"empty\");\n    sills[1] = thirdSill;\n    xOffset += 223;\n    let fourthSill = game.physics.add.staticSprite(xOffset, yOffset,\"empty\");\n    sills[2] = fourthSill;\n    for(sill of sills){\n        let currSill = sill;\n        currSill.body.setSize(175,5);\n        perches.push(currSill);\n        game.physics.add.collider(pigeon, currSill, function () {\n            pigeon.onPerch = true;\n            pigeon.currPerch = currSill;\n        });\n        for (agent of pigeonAgents) {\n            let currAgent = agent;\n            game.physics.add.collider(agent.object, currSill, function () {\n                currAgent.object.onPerch = true;\n                currAgent.object.currPerch = currSill;\n            });\n        }\n    }\n}\n\n// lastState is immutable!!\nlet lastState = {\n    direction: 1,\n    mode: \"walk\",\n};\n\n//update runs every tick\nfunction update(time, delta) {\n    let direction = Phaser.Input.Keyboard.JustDown(left)\n        ? -1\n        : Phaser.Input.Keyboard.JustDown(right)\n        ? 1\n        : lastState.direction; //direction for player\n\n    const isGrounded = pigeon.body.onFloor();\n\n    pigeon.body.setDragY(pigeon.body.velocity.y > 0 ? 0 : LIFT_DRAG);\n    if (!isGrounded) {\n        pigeon.onPerch = false;\n    }\n\n    let mode = getNewMode(lastState.mode, isGrounded, { space, left, right });\n\n    if (direction != lastState.direction) {\n        pigeon.flipX = direction == -1 ? true : false;\n        pigeon.body.setVelocityX(0);\n    }\n\n    if (mode != lastState.mode) {\n        pigeon.play(PIGEON_STATE_ANIMATIONS.get(mode));\n    }\n\n    // just flapped\n    if (Phaser.Input.Keyboard.JustDown(space)) {\n        for (agent of pigeonAgents) {\n            agent.sawFlap = true;\n        }\n        if (left.isDown || right.isDown) {\n            flapMove(pigeon);\n        } else {\n            flapNoMove(pigeon);\n        }\n    } else if (mode != lastState.mode) {\n        switch (mode) {\n            case \"stand\":\n                stand(pigeon);\n                break;\n        }\n    } else {\n        switch (mode) {\n            case \"walk\":\n                walk(pigeon);\n                break;\n            case \"drift\":\n                drift(pigeon);\n                break;\n            case \"dive\":\n                dive(pigeon);\n                break;\n            case \"glide\":\n                glide(pigeon);\n                break;\n            case \"swoop\":\n                swoop(pigeon);\n                break;\n        }\n    }\n\n    if (direction != lastState.direction || mode != lastState.mode) {\n        lastState = { mode, direction };\n    }\n    if (mode == \"dive\" || pigeon.body.velocity.y > 150) {\n        pigeon.body.checkCollision.down = false;\n    } else {\n        pigeon.body.checkCollision.down = true;\n    }\n\n    //    if(Phaser.Input.Keyboard.JustDown(j)){\n    //        pigeonSound.play();\n    //        //console.log(\"playing sound\");\n    //    }\n\n    for (agent of pigeonAgents) {\n        pigeonThink(agent, delta);\n    }\n    for(man of businessMen){\n        businessManLogic(man);\n    }\n}\n\nfunction businessManLogic(man){\n    man.flipX = man.facing == 1 ? false:true;\n    man.x += 1.5 * man.facing;\n} \n\n//functionally decomposed mmovement bby yeah\nfunction flapMove(pigeon) {\n    pigeon.setVelocity(\n        pigeon.body.velocity.x + 20 * (pigeon.flipX ? -1 : 1),\n        pigeon.body.velocity.y - 30\n    );\n}\n\nfunction flapNoMove(pigeon) {\n    pigeon.setVelocity(\n        pigeon.body.velocity.x + 10 * (pigeon.flipX ? -1 : 1),\n        pigeon.body.velocity.y - 40 - pigeon.body.position.y / 20\n    );\n}\n\nfunction glide(pigeon) {\n    pigeon.setVelocityY(pigeon.body.velocity.y - .75);\n    pigeon.setVelocityX(pigeon.body.velocity.x + 1 * (pigeon.flipX ? -1 : 1));\n}\n\nfunction drift(pigeon) {\n    pigeon.setVelocityX(pigeon.body.velocity.x + 1 * (pigeon.flipX ? -1 : 1));\n}\n\nfunction walk(pigeon) {\n    pigeon.x += 1 * (pigeon.flipX ? -1 : 1);\n    pigeon.setVelocity((pigeon.flipX ? -1 : 1) * 0.5, 0);\n}\n\nfunction stand(pigeon) {\n    pigeon.setVelocity(0, 0);\n}\n\nfunction dive(pigeon) {\n    pigeon.setVelocityY(pigeon.body.velocity.y + 3);\n    pigeon.setVelocityX(pigeon.body.velocity.x + 2 * (pigeon.flipX ? -1 : 1));\n}\n\nfunction swoop(pigeon) {\n    pigeon.setVelocityX(pigeon.body.velocity.x + 2 * (pigeon.flipX ? -1 : 1));\n}\n\nfunction roboFlap(pigeon, posDifVector, velDifVector) {\n    let body = pigeon.body;\n    let velocity = body.velocity;\n    if (posDifVector.y < 0) {\n        body.setVelocityY(\n            velocity.y -\n                (Math.abs(posDifVector.y) / 3 + Math.abs(velDifVector.y) / 5)\n        );\n    }\n    if (posDifVector.x * (pigeon.flipX ? -1 : 1) > 0) {\n        body.setVelocityX(\n            velocity.x +\n                (Math.abs(posDifVector.x) / 4 + Math.abs(velDifVector.x) / 5) *\n                    (pigeon.flipX ? -1 : 1)\n        );\n    }\n}\n\n//pigeon state machine\nconst PIGEON_STATE_ANIMATIONS = new Map([\n    [\"walk\", { key: \"walk\", repeat: -1 }],\n    [\"stand\", { key: \"idle\", frameRate: 2, repeat: -1 }],\n    [\"glide\", { key: \"flap_nomove\", repeat: -1 }],\n    [\"fall\", { key: \"noflap_nomove\", repeat: -1 }],\n    [\"drift\", { key: \"noflap_move\", repeat: -1 }],\n    [\"dive\", { key: \"dive\", repeat: -1 }],\n    [\"swoop\", { key: \"flap_move\", repeat: -1 }],\n]);\n\nconst PIGEON_STATE_MOVEMENT = new Map([\n    [\"walk\", walk],\n    [\"stand\", stand],\n    [\"drift\", drift],\n    [\"glide\", glide],\n    [\"dive\", dive],\n    [\"swoop\", swoop],\n]);\n\nvar pigeonsMap = new Map();\n\n//computer controlled pigeon actions feat spaghetti\n\nfunction pigeonThink(dummy, delta) {\n    let newMode;\n    let sprite = dummy.object;\n\n\n    if (dummy.object.onPerch && !dummy.object.body.onFloor()) {\n        dummy.object.onPerch = false;\n    }\n\n    let descisions;\n    if (dummy.independent) {\n        descisions = roam(dummy);\n    } else {\n        let seenPigeons = seeOtherPigeons(dummy); //list of observed pigeons\n        descisions = flock(dummy, seenPigeons); //sets movement booleans to stay with flock\n    }\n\n    sprite.body.setDrag(sprite.body.velocity.y > 0 ? 0 : LIFT_DRAG);\n\n    //descisions holds  list of values\n    let special = descisions[0];\n    let flip = descisions[1];\n    let leaning = descisions[2];\n    let wings = descisions[3];\n\n    if (flip != sprite.flipX) {\n        sprite.body.setVelocityX(pigeon.body.velocity.x / 2);\n    }\n    sprite.flipX = flip;\n\n    //flip if on world edge\n    if (sprite.body.position.x <= 100) {\n        sprite.flipX = false;\n    }\n    if (sprite.body.position.x >= SCENE_WIDTH - 100) {\n        sprite.flipX = true;\n    }\n\n    if (dummy.freezeFrame >= FLAP_CONST) {\n        //animation timer tied to robo_pigeon\n        if (dummy.flapCompleted) {\n            //boolean for anim timer flapping\n            if (sprite.body.onFloor()) {\n                //choose correct behavior based off of descisions list\n                if (leaning) {\n                    newMode = \"walk\";\n                } else {\n                    newMode = \"stand\";\n                }\n            } else if (special == 0) {\n                if (wings) {\n                    if (leaning) {\n                        newMode = \"swoop\";\n                    } else {\n                        newMode = \"glide\";\n                    }\n                } else if (leaning) {\n                    newMode = \"drift\";\n                } else {\n                    newMode = \"fall\";\n                }\n            } else {\n                if (leaning) {\n                    newMode = \"glide\";\n                } else {\n                    newMode = \"swoop\";\n                }\n            }\n            if (newMode != dummy.mode) {\n                dummy.mode = newMode;\n                sprite.play(PIGEON_STATE_ANIMATIONS.get(dummy.mode));\n            }\n            if (special == 0) {\n                if (dummy.mode != \"fall\") {\n                    PIGEON_STATE_MOVEMENT.get(dummy.mode)(sprite);\n                }\n            } else if (special == \"flap\") {\n                if (dummy.independent || (dummy.following.onPerch || dummy.onPerch)) {\n                    if (leaning) {\n                        flapMove(sprite);\n                    } else {\n                        flapNoMove(sprite);\n                    }\n                } else {\n                    roboFlap(sprite, descisions[4], descisions[5]);\n                }\n\n                flap = false;\n                dummy.flapCompleted = false;\n                dummy.freezeFrame = 0;\n            } else if (special == \"dive\") {\n                dive(sprite);\n                sprite.play(PIGEON_STATE_ANIMATIONS.get(\"dive\"));\n            }\n        } else {\n            dummy.freezeFrame = 0;\n            dummy.flapCompleted = true;\n            if (leaning) {\n                dummy.mode = \"drift\";\n            } else {\n                dummy.mode = \"fall\";\n            }\n        }\n    } else {\n        sprite.play(PIGEON_STATE_ANIMATIONS.get(dummy.mode));\n    }\n    dummy.freezeFrame += delta;\n    if (sprite.body.velocity.y > 150 || special == \"dive\") {\n        sprite.body.checkCollision.down = false;\n    } else {\n        sprite.body.checkCollision.down = true;\n    }\n}\n\nfunction seeOtherPigeons(observer) {\n    let body1 = observer.object.body;\n    let seenPigeons = [];\n    let indiePigeons = [];\n\n    for (agent of pigeonAgents) {\n        if (agent.object == observer.object) {\n            continue;\n        }\n        let body2 = agent.object.body;\n        if (\n            Phaser.Math.Distance.Between(\n                body1.position.x,\n                body1.position.y,\n                body2.position.x,\n                body2.position.y\n            ) <= observedRadius\n        ) {\n            if (agent.independent) {\n                indiePigeons.push(agent.object);\n            } else {\n                seenPigeons.push(agent.object);\n            }\n        }\n    }\n    if (seenPigeons.length > MAX_FLOCK) {\n        if (seenPigeons.length < observer.slicer + MAX_FLOCK) {\n            observer.slicer = generateRandomBetween(\n                -1,\n                seenPigeons.length - MAX_FLOCK + 1\n            );\n            seenPigeons = seenPigeons.slice(\n                observer.slicer,\n                observer.slicer + MAX_FLOCK\n            );\n        } else {\n            seenPigeons = seenPigeons.slice(\n                observer.slicer,\n                observer.slicer + MAX_FLOCK\n            );\n        }\n    }\n\n    if (follow_bool) {\n        if (\n            Phaser.Math.Distance.Between(\n                body1.position.x,\n                body1.position.y,\n                pigeon.body.position.x,\n                pigeon.body.position.y\n            ) <= observedRadius\n        ) {\n            observer.following = pigeon;\n        } else if(observer.following == pigeon){\n            observer.following = -1;\n        }\n    }else if(observer.following == pigeon){\n        observer.following = -1;\n    }\n\n    if(observer.following != pigeon && !indiePigeons.includes(observer.following)){\n        if(indiePigeons.length > 0){\n            let rando = generateRandomBetween(-1, indiePigeons.length);\n            observer.following = indiePigeons[rando];\n        } else{\n            observer.following = -1;\n        }\n    }\n    if(observer.following != -1){\n        for(i = 0; i<LEADING_WEIGHT; i++){\n            seenPigeons.push(observer.following);\n        }\n    }\n\n    return seenPigeons;\n}\n\nfunction flock(member, pigeonGroup) {\n    let averagePosX = 0;\n    let averagePosY = 0;\n    let averageVelX = 0;\n    let averageVelY = 0;\n\n    let body = member.object.body;\n\n    let minPosX = body.position.x;\n    let maxPosX = body.position.x;\n\n\n    for (agent of pigeonGroup) {\n        if (agent == member.object) {\n            continue;\n        }\n        let body2 = agent.body;\n\n        averageVelX += body2.velocity.x;\n        averageVelY += body2.velocity.y;\n        averagePosX += body2.position.x;\n        averagePosY += body2.position.y;\n\n        if (body2.position.x > maxPosX) {\n            maxPosX = body2.position.x;\n        } else if (body2.position.x < minPosX) {\n            minPosX = body2.position.x;\n        }\n    }\n    minPosX = minPosX < 100 ? 100 : minPosX;\n    maxPosX = maxPosX > SCENE_WIDTH - 100 ? SCENE_WIDTH - 100 : maxPosX;\n\n    if (minPosX > maxPosX) {\n        if (minPosX == 100) {\n            maxPosX = minPosX + 25;\n        } else {\n            minPosX = maxPosX - 25;\n        }\n    }\n\n    averageVelX = averageVelX / pigeonGroup.length;\n    averageVelY = averageVelY / pigeonGroup.length;\n    averagePosX = averagePosX / pigeonGroup.length;\n    averagePosY = averagePosY / pigeonGroup.length;\n\n    if (body.onFloor()) {\n        return walkFlock(member, averagePosX, averagePosY, minPosX, maxPosX);\n    } else {\n        return flapFlock(\n            member,\n            averagePosX,\n            averagePosY,\n            averageVelX,\n            averageVelY\n        );\n    }\n}\n\nfunction walkFlock(member, averagePosX, averagePosY, minPosX, maxPosX) {\n    let wings;\n    let leaning;\n    let flip;\n\n    let specialCase = 0;\n\n    let body = member.object.body;\n\n    if (member.object.onPerch) {\n        let perch = member.object.currPerch;\n        minPosX = perch.body.position.x;\n        maxPosX = perch.body.width + perch.body.position.x;\n    }\n    let range = maxPosX - minPosX;\n\n    if (member.justLanded) {\n        member.object.body.setVelocity(0, 0);\n        member.target.pos = generateRandomBetween(minPosX, maxPosX);\n        member.justLanded = false;\n    }\n    flip = member.target.pos < body.position.x;\n    if (Math.abs(member.target.pos - body.position.x) > 1) {\n        leaning = true;\n    } else {\n        if (generateRandomBetween(0, 1000) < 10) {\n            if (member.object.onPerch) {\n                member.target.pos = generateRandomBetween(minPosX, maxPosX);\n            } else {\n                let dir;\n                if (body.position.x - range < 100) {\n                    dir = 1;\n                } else if (body.position.x + range > SCENE_WIDTH - 100) {\n                    dir = -1;\n                } else if (Math.abs(body.position.x - averagePosX) > 25) {\n                    dir = averagePosX < body.position.x ? 1 : -1;\n                } else {\n                    dir = body.position.x < SCENE_WIDTH / 2 ? 1 : -1;\n                }\n                member.target.pos = member.object.body.position.x + range * dir;\n            }\n        }\n    }\n    let posDifVector;\n    if(member.following == -1){\n        if (body.position.y - averagePosY > 50) {\n            specialCase = \"flap\";\n            member.justLanded = false;\n        } else if (body.position.y - averagePosY < -200) {\n            specialCase = \"dive\";\n            member.justLanded = false;\n            member.object.y += 5;\n        }else if (Math.abs(body.position.x - averagePosX) > range/2){\n            leaning = true;\n            flip = body.position.x > averagePosX ? true:false;\n        }\n        posDifVector = {\n            x: averagePosX - body.position.x,\n            y: averagePosY - body.position.y,\n        };\n    } else{\n        let lead = member.following.body.position;\n        if (body.position.y - lead.y > 50) {\n            specialCase = \"flap\";\n            member.justLanded = false;\n        } else if (body.position.y - lead.y< -200) {\n            specialCase = \"dive\";\n            member.justLanded = false;\n            member.object.y += 5;\n        }else if (Math.abs(body.position.x - lead.x) > range/2){\n            leaning = true;\n            flip = body.position.x > lead.x ? true:false;\n        }\n        posDifVector = {\n            x: averagePosX - body.position.x,\n            y: averagePosY - body.position.y,\n        };\n    }\n    return [specialCase, flip, leaning, wings, posDifVector, { x: 0, y: 0 }];\n}\n\nfunction flapFlock(member, averagePosX, averagePosY, averageVelX, averageVelY) {\n    let wings = false;\n    let leaning;\n    let flip = member.object.flipX;\n\n    averagePosX += member.noise.x;\n    averagePosY += member.noise.y;\n\n    let specialCase = 0;\n\n    let body = member.object.body;\n    let velocity = Object.assign({}, body.velocity);\n\n    let posDifVector = {\n        x: averagePosX - body.position.x,\n        y: averagePosY - body.position.y,\n    };\n    let velDifVector = {\n        x: averageVelX - velocity.x,\n        y: averageVelY - velocity.y,\n    };\n\n    if(member.following.onPerch){\n        let targetPerch = member.following.currPerch;\n        let targetPos = Object.assign({}, targetPerch.body.position);\n\n        if(Math.abs(member.noise.x) > targetPerch.body.width/2 - targetPerch.body.width/8){\n            member.noise.x = generateWalkableNoise(targetPerch) * randomDirection();\n        }\n\n        targetPos.x += member.noise.x + targetPerch.body.width/2;\n        targetPos.y -= PIGEON_DIMENSIONS.height\n\n        if(Math.abs(body.position.x - targetPos.x) < PIGEON_DIMENSIONS.width + targetPerch.body.width/8){\n            if(body.position.y < targetPos.y - PIGEON_DIMENSIONS.height){\n                leaning = false;\n                if (velocity.y > 150) {\n                    specialCase = \"flap\";\n                }\n                if(targetPos.y - body.position.y < 25 && Math.abs(targetPos.x - body.position.x) < 15){\n                    wings = false;\n                }\n            }else{\n                specialCase = \"flap\";\n                leaning = false;\n                console.log(\"please\");\n            }\n        }else{\n            flip = body.position.x > targetPos.x + PIGEON_DIMENSIONS.width/2;\n            flip = Math.abs(targetPos.x - body.position.x) > 25? flip:member.object.flipX;\n            leaning = Math.abs(body.position.x - targetPos.x) < 50 ? false : true;\n\n            if (targetPos.y < body.position.y) {\n                if(body.velocity.y > -75){\n                    specialCase = \"flap\";\n                }else{ \n                    wings = true;\n                } \n            } else {\n                if (Math.abs(body.position.y - targetPos.y) > 500) {\n                    specialCase = \"dive\";\n                } else {\n                    wings = Math.abs(body.position.y - targetPos.y) > 50 ? false : true;\n                }\n            }\n        }\n    }else{\n        if (Math.abs(averageVelX) > 10) {\n            flip = averageVelX < 0;\n        } else if (Math.abs(averagePosX - body.position.x) > 45) {\n            flip = averagePosX < body.position.x;\n        }\n\n        //directly change x velocity\n        if (\n            posDifVector.x * (flip ? -1 : 1) > 200 ||\n            velDifVector.x * (flip ? -1 : 1) > 75\n        ) {\n            specialCase = \"flap\";\n        } else if (posDifVector.x * (flip ? -1 : 1) > 50) {\n            leaning = true;\n        } else {\n            leaning = false;\n        }\n\n        \n        if (averagePosY < body.position.y) {\n            if (Math.abs(posDifVector.y) > 50) {\n                specialCase = \"flap\";\n            } else if (averageVelY < 0) {\n                if (velocity.y > 0) {\n                    specialCase = \"flap\";\n                } else if (Math.abs(averageVelY) - Math.abs(velocity.y) > 50) {\n                    specialCase = \"flap\";\n                }\n            } else {\n                wings = true;\n            }\n        } else if (Math.abs(posDifVector.y) < 100) {\n            wings = true;\n        } else {\n            wings = false;\n            if (Math.abs(posDifVector.y) > 200) {\n                specialCase = \"dive\";\n            }\n        }\n        if (\n            Phaser.Math.Distance.Between(\n                body.position.x,\n                body.position.y,\n                averagePosX,\n                averagePosY\n            ) <= 50\n        ) {\n            member.noise.x = generateNoisy(FLOCK_NOISE);\n            member.noise.y = generateNoisy(FLOCK_NOISE);\n        }\n    }\n\n    if (specialCase == \"flap\") {\n        if (posDifVector.y > 0) {\n            leaning = true;\n        } else if (posDifVector * (flip ? -1 : 1) < 0) {\n            leaning = false;\n        } else {\n            leaning =\n                Math.abs(posDifVector.x) > Math.abs(posDifVector.y)\n                    ? true\n                    : false;\n        }\n    }\n\n    return [specialCase, flip, leaning, wings, posDifVector, velDifVector];\n}\n\nfunction generateWalkableNoise(perch){\n    newNoise = generateNoisy(perch.body.width / 2 - perch.body.width/8);\n    return newNoise;\n}\n\nfunction roam(member) {\n    let sprite = member.object;\n    let body = sprite.body;\n    let position = body.position;\n\n    let wings;\n    let leaning;\n    let flip;\n    let specialCase = 0;\n    let targetPos = member.target.pos;\n    let targetPerch = member.target.perch;\n\n    if (\n       (Phaser.Math.Distance.Between(\n            position.x,\n            position.y,\n            targetPos.x,\n            targetPos.y\n        ) < 75 && targetPos.y > position.y) || body.onFloor()\n    ) {\n        return land(member);\n    } else {\n        flip = targetPos.x > position.x ? false : true;\n        flip = Math.abs(targetPos.x - position.x) < targetPerch.body.width/8 ? sprite.flipX : flip;\n        leaning = Math.abs(position.x - targetPos.x) < 50 ? false : true;\n\n        if (targetPos.y < position.y) {\n            if(body.velocity.y > -75){\n                specialCase = \"flap\";\n            }else{ \n                wings = true;\n            } \n        } else {\n            if (Math.abs(position.y - targetPos.y) > 500) {\n                specialCase = \"dive\";\n            } else {\n                wings = Math.abs(position.y - targetPos.y) > 50 ? false : true;\n            }\n        }\n        return [specialCase, flip, leaning, wings];\n    }\n}\nfunction land(dummy) {\n    let wings = true;\n    let specialCase = 0;\n    let flip = dummy.object.flipX;\n    let leaning = false;\n    \n    if(dummy.object.body.onFloor()){\n        if(dummy.target.perch == dummy.object.currPerch){\n            if(Math.abs(dummy.object.body.position.x - dummy.target.pos.x) > 5){  \n                flip =  dummy.target.pos.x > dummy.object.body.position.x ? false:true;\n                leaning = true;\n            } else if( generateRandomBetween(-1, 1000) < 10){\n                let targeting = generateRoamTarget(dummy.noise.x);\n                dummy.noise.x = targeting[1];\n                dummy.target = targeting[0]; \n            }\n        }else{\n            let targetBelow = dummy.object.body.position.y > dummy.target.pos.y ? false:true;\n            let greaterDistance = Math.abs(dummy.object.body.position.y - dummy.target.pos.y) > Math.abs(dummy.object.body.position.x - dummy.target.pos.x) ? 'y':'x';\n            flip = dummy.object.body.position.x < dummy.target.pos.x ? false:true;\n            if(greaterDistance == 'x'){\n                leaning = true;\n            }else{\n                if(targetBelow){\n                    specialCase = \"dive\";\n                    dummy.object.y += 5;\n                }else{\n                    specialCase = \"flap\";\n                }\n            }\n        }\n    }else {\n        if (dummy.object.body.velocity.y > 150) {\n            specialCase = \"flap\";\n        }\n        if(dummy.target.pos.y - dummy.object.body.position.y < 5 && Math.abs(dummy.target.pos.x - dummy.object.body.position.x) < 5){\n            wings = false;\n        }\n    }\n    return [specialCase, flip, leaning, wings];\n}\n\nfunction generateRoamTarget(noiseX) {\n    let perchTarget = 0;\n    let xPos;\n    let yPos;\n    let newNoise;\n\n    perchTarget = generateRandomBetween(-1, perches.length);\n    perchTarget = perches[perchTarget];\n    xPos =\n        perchTarget.body.position.x +\n        perchTarget.body.width / 2;\n    yPos = perchTarget.body.position.y - 25;\n\n    newNoise = generateNoisy(perchTarget.body.width / 2 - perchTarget.body.width/8);\n    noiseX = newNoise;\n\n    return [{pos: {x: xPos + noiseX, y: yPos }, perch: perchTarget}, newNoise];\n}\n\nfunction generateNoisy(num) {\n    let rand = generateRandomBetween(0, num + 1);\n    return rand * randomDirection();\n}\nfunction generateRandomBetween(min, max) {\n    let range = max - min - 1;\n    let rando = Math.floor(Math.random() * range);\n    return rando + min + 1;\n}\nfunction randomDirection() {\n    let rando = Math.floor(Math.random() * 2) - 1;\n    return rando == 0 ? -1 : 1;\n}\n\nfunction getNewMode(lastMode, isGrounded, keys) {\n    if (isGrounded) {\n        if (left.isDown || right.isDown) {\n            return \"walk\";\n        } else if (pigeon.onPerch && down.isDown) {\n            return \"dive\";\n        } else {\n            return \"stand\";\n        }\n    } else {\n        if (keys.space.isDown) {\n            if (left.isDown || right.isDown) {\n                return \"swoop\";\n            } else {\n                return \"glide\";\n            }\n        } else {\n            if (left.isDown || right.isDown) {\n                return \"drift\";\n            } else if (down.isDown) {\n                return \"dive\";\n            } else {\n                return \"fall\";\n            }\n        }\n    }\n}\n\nconst Mingle = () =>{\n    return (\n        <IonPhaser game={game}/>\n    )\n}\n\nexport default Mingle;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}