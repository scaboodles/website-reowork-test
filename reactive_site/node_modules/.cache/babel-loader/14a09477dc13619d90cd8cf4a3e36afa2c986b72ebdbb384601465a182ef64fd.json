{"ast":null,"code":"export function clickAndDrag(element, win) {\n  dragElement(element, win);\n}\nexport function suspendDrag(elmnt) {\n  if (document.getElementById(elmnt.id + \"Head\")) {\n    // if present, the header is where you move the DIV from:\n    document.getElementById(elmnt.id + \"Head\").removeEventListener(\"onmousedown\");\n  } else {\n    //error can happen if element is missing a head or an id\n    document.removeEventListener(\"onmousemove\");\n  }\n}\nfunction dragElement(elmnt, win) {\n  var x1 = 0,\n    x2 = 0,\n    y1 = 0,\n    y2 = 0;\n\n  //hella globals bc i am bad at programming\n  let outOfBoundsX = 0;\n  let outOfBoundsY = 0;\n  let width = 0;\n  let height = 0;\n  let dxOld = 0;\n  let dyOld = 0;\n  let leftGrace = 0;\n  let rightGrace = 0;\n  let parentDiv = elmnt.parentNode;\n  let maxY = parentDiv.innerHeight;\n  let maxX = parentDiv.innerWidth;\n  const headerOffset = 15;\n  if (document.getElementById(elmnt.id + \"Head\")) {\n    // if present, the header is where you move the DIV from:\n    document.getElementById(elmnt.id + \"Head\").onmousedown = dragMouseDown;\n  } else {\n    //error can happen if element is missing a head or an id\n    elmnt.onmousedown = dragMouseDown;\n  }\n  function dragMouseDown(e) {\n    e = e || window.event; //if e is unassigned, it is assigned to window.event\n    e.preventDefault(); //only execute specifically handled events\n\n    // get the mouse cursor position at startup:\n    x2 = e.clientX;\n    y2 = e.clientY;\n\n    //initialize outOfBounds values\n    outOfBoundsX = elmnt.offsetLeft;\n    outOfBoundsY = elmnt.offsetTop;\n\n    //max height and width of window\n    maxX = window.innerHeight;\n    maxX = window.innerWidth;\n    if (win) {\n      //need some data from win ref, might not exist yet\n      width = win.offsetWidth;\n      height = win.offsetHeight;\n      let pointOnWin = x2 - elmnt.offsetLeft;\n      leftGrace = pointOnWin;\n      rightGrace = width - pointOnWin;\n    } else {\n      width = elmnt.offsetWidth;\n      height = elmnt.offsetHeight;\n      let pointOnWin = x2 - elmnt.offsetLeft;\n      leftGrace = pointOnWin;\n      rightGrace = width - pointOnWin;\n    }\n    document.onmouseup = closeDragElement; //stop dragging on mouse up\n    document.onmousemove = elementDrag; // call a function whenever the cursor moves:\n  }\n\n  function elementDrag(e) {\n    e = e || window.event; //if e is unassigned, it is assigned to window.event\n    e.preventDefault();\n\n    //recalculate cursor position\n\n    x1 = x2 - e.clientX;\n    y1 = y2 - e.clientY;\n    let dx = -x1;\n    let dy = -y1;\n    x2 = e.clientX;\n    y2 = e.clientY;\n    if (dxOld * dx < 0) {\n      //recalculate left and right grace spans on switch direction\n      let pointOnWin = x2 - elmnt.offsetLeft;\n      leftGrace = pointOnWin;\n      rightGrace = width - pointOnWin;\n      if (dx < 0) {\n        //force window back in bounds after change in direction\n        let outOfBounds = elmnt.offsetLeft + width - maxX;\n        if (outOfBounds > 0) {\n          outOfBoundsX -= outOfBounds;\n          elmnt.style.left = `${maxX - width}px`;\n        }\n      } else {\n        let outOfBounds = elmnt.offsetLeft;\n        if (outOfBounds < 0) {\n          outOfBoundsX -= outOfBounds;\n          elmnt.style.left = `0px`;\n        }\n      }\n    }\n    if (dyOld * dy < 0) {\n      if (dy > 0) {\n        let outOfBounds = elmnt.offsetTop;\n        if (outOfBounds < 0) {\n          outOfBoundsY -= outOfBounds;\n          elmnt.style.top = `0px`;\n        }\n      } else {\n        let outOfBounds = elmnt.offsetTop + height - maxY;\n        if (outOfBounds > 0) {\n          outOfBoundsY -= outOfBounds;\n          elmnt.style.top = `${maxY - height}px`;\n        }\n      }\n    }\n    // set the element's new position:\n    if (dx < 0) {\n      //calculate moving left and right separately\n      if (outOfBoundsX >= 0 && outOfBoundsX - rightGrace <= maxX - width) {\n        //not out of bounds left side, within grace span of right edge\n        outOfBoundsX -= x1; //update outOfBounds tracker\n        elmnt.style.left = elmnt.offsetLeft - x1 + \"px\"; //update pos\n      } else if (rightGrace < 0) {\n        let pointOnWin = x2 - elmnt.offsetLeft;\n        leftGrace = pointOnWin;\n        rightGrace = width - pointOnWin;\n      }\n    } else if (dx > 0) {\n      if (outOfBoundsX <= maxX - width && outOfBoundsX + leftGrace >= 0) {\n        outOfBoundsX -= x1;\n        elmnt.style.left = elmnt.offsetLeft - x1 + \"px\";\n      } else if (leftGrace < 0) {\n        let pointOnWin = x2 - elmnt.offsetLeft;\n        leftGrace = pointOnWin;\n        rightGrace = width - pointOnWin;\n      }\n    }\n    if (dy < 0) {\n      //calculate moving up and down separately\n      if (outOfBoundsY >= 0 && outOfBoundsY <= maxY && e.clientY < maxY - height + headerOffset) {\n        //not out of bounds on top\n        outOfBoundsY -= y1; //update outOfBounds tracker\n        elmnt.style.top = elmnt.offsetTop - y1 + \"px\"; //update pos\n      }\n    } else if (dy > 0) {\n      if (outOfBoundsY <= maxY - height && outOfBoundsY >= 0 && e.clientY - headerOffset > 0) {\n        outOfBoundsY -= y1;\n        elmnt.style.top = elmnt.offsetTop - y1 + \"px\";\n      }\n    }\n    if (!dx == 0) {\n      dxOld = dx;\n    }\n    if (!dy == 0) {\n      dyOld = dy;\n    }\n  }\n  function closeDragElement(e) {\n    // stop moving when mouse button is released by removing document mouse events\n    document.onmouseup = null;\n    document.onmousemove = null;\n    if (elmnt.offsetLeft + width > maxX) {\n      //force window back in bounds if out\n      elmnt.style.left = `${maxX - width}px`;\n    } else if (elmnt.offsetLeft < 0) {\n      elmnt.style.left = `0px`;\n    }\n    outOfBoundsX = 0;\n    outOfBoundsY = 0;\n  }\n}","map":{"version":3,"names":["clickAndDrag","element","win","dragElement","suspendDrag","elmnt","document","getElementById","id","removeEventListener","x1","x2","y1","y2","outOfBoundsX","outOfBoundsY","width","height","dxOld","dyOld","leftGrace","rightGrace","parentDiv","parentNode","maxY","innerHeight","maxX","innerWidth","headerOffset","onmousedown","dragMouseDown","e","window","event","preventDefault","clientX","clientY","offsetLeft","offsetTop","offsetWidth","offsetHeight","pointOnWin","onmouseup","closeDragElement","onmousemove","elementDrag","dx","dy","outOfBounds","style","left","top"],"sources":["/Users/owen/dev/sitemk2test/reactive_site/src/draggableDiv.js"],"sourcesContent":["export function clickAndDrag(element, win){\n    dragElement(element, win);\n}\n\nexport function suspendDrag(elmnt){\n    if (document.getElementById(elmnt.id + \"Head\")) {\n        // if present, the header is where you move the DIV from:\n        document.getElementById(elmnt.id + \"Head\").removeEventListener(\"onmousedown\");\n    } else {\n        //error can happen if element is missing a head or an id\n        document.removeEventListener(\"onmousemove\");\n    }\n}\n\nfunction dragElement(elmnt, win){\n    var x1 = 0, x2 = 0, y1 = 0, y2 = 0;\n\n    //hella globals bc i am bad at programming\n    let outOfBoundsX = 0;\n    let outOfBoundsY = 0;\n\n    let width = 0;\n    let height = 0;\n\n    let dxOld = 0;\n    let dyOld = 0;\n\n    let leftGrace = 0;\n    let rightGrace = 0;\n\n    let parentDiv = elmnt.parentNode;\n\n    let maxY =  parentDiv.innerHeight;\n    let maxX = parentDiv.innerWidth;\n\n    const headerOffset = 15;\n\n    if (document.getElementById(elmnt.id + \"Head\")) {\n        // if present, the header is where you move the DIV from:\n        document.getElementById(elmnt.id + \"Head\").onmousedown = dragMouseDown;\n    } else {\n        //error can happen if element is missing a head or an id\n        elmnt.onmousedown = dragMouseDown;\n    }\n\n    function dragMouseDown(e){\n        e = e || window.event; //if e is unassigned, it is assigned to window.event\n        e.preventDefault(); //only execute specifically handled events\n\n        // get the mouse cursor position at startup:\n        x2 = e.clientX;\n        y2 = e.clientY;\n\n        //initialize outOfBounds values\n        outOfBoundsX = elmnt.offsetLeft;\n        outOfBoundsY = elmnt.offsetTop;\n\n        //max height and width of window\n        maxX = window.innerHeight;\n        maxX = window.innerWidth;\n\n        if(win){ //need some data from win ref, might not exist yet\n            width = win.offsetWidth;\n            height = win.offsetHeight;\n            let pointOnWin = x2 - elmnt.offsetLeft;\n            leftGrace = pointOnWin;\n            rightGrace = width - pointOnWin;\n        }else{\n            width = elmnt.offsetWidth;\n            height = elmnt.offsetHeight;\n            let pointOnWin = x2 - elmnt.offsetLeft;\n            leftGrace = pointOnWin;\n            rightGrace = width - pointOnWin;\n        }\n\n        document.onmouseup = closeDragElement; //stop dragging on mouse up\n        document.onmousemove = elementDrag; // call a function whenever the cursor moves:\n\n    }\n\n    function elementDrag(e){\n        e = e || window.event; //if e is unassigned, it is assigned to window.event\n        e.preventDefault();\n\n        //recalculate cursor position\n\n        x1 = x2 - e.clientX;\n        y1 = y2 - e.clientY;\n\n        let dx = -x1;\n        let dy = -y1;\n\n        x2 = e.clientX;\n        y2 = e.clientY;\n\n        if(dxOld * dx < 0){//recalculate left and right grace spans on switch direction\n            let pointOnWin = x2 - elmnt.offsetLeft;\n            leftGrace = pointOnWin;\n            rightGrace = width - pointOnWin;\n\n            if(dx<0){ //force window back in bounds after change in direction\n                let outOfBounds = elmnt.offsetLeft + width - maxX;\n                if(outOfBounds>0){\n                    outOfBoundsX -= outOfBounds; \n                    elmnt.style.left = `${maxX-width}px`;\n                }\n            }else{\n                let outOfBounds = elmnt.offsetLeft;\n                if(outOfBounds<0){\n                    outOfBoundsX -= outOfBounds; \n                    elmnt.style.left = `0px`;\n                }\n            }\n        }\n\n        if(dyOld * dy < 0){\n            if(dy>0){\n                let outOfBounds = elmnt.offsetTop;\n                if(outOfBounds < 0){\n                    outOfBoundsY -= outOfBounds;\n                    elmnt.style.top = `0px`;\n                }\n            }else{\n                let outOfBounds = (elmnt.offsetTop + height) - maxY;\n                if(outOfBounds > 0){\n                    outOfBoundsY -= outOfBounds;\n                    elmnt.style.top = `${maxY - height}px`\n                }\n            }\n        }\n        // set the element's new position:\n        if(dx<0){ //calculate moving left and right separately\n            if(outOfBoundsX >= 0 && outOfBoundsX - rightGrace <= maxX - width){//not out of bounds left side, within grace span of right edge\n                outOfBoundsX -= x1; //update outOfBounds tracker\n                elmnt.style.left = (elmnt.offsetLeft - x1) + \"px\";//update pos\n            }else if(rightGrace < 0){\n                let pointOnWin = x2 - elmnt.offsetLeft;\n                leftGrace = pointOnWin;\n                rightGrace = width - pointOnWin;\n            }\n        }else if(dx>0){\n            if(outOfBoundsX <= maxX - width && outOfBoundsX + leftGrace >= 0){\n                outOfBoundsX -= x1;\n                elmnt.style.left = (elmnt.offsetLeft - x1) + \"px\";\n            }else if(leftGrace < 0){\n                let pointOnWin = x2 - elmnt.offsetLeft;\n                leftGrace = pointOnWin;\n                rightGrace = width - pointOnWin;\n            }\n        }\n\n        if(dy<0){ //calculate moving up and down separately\n            if(outOfBoundsY >= 0 && outOfBoundsY <= maxY && e.clientY < maxY - height + headerOffset){//not out of bounds on top\n                outOfBoundsY -= y1; //update outOfBounds tracker\n                elmnt.style.top = (elmnt.offsetTop - y1) + \"px\";//update pos\n            }\n        }else if(dy>0){\n            if(outOfBoundsY <= maxY - height && outOfBoundsY >= 0 && e.clientY - headerOffset > 0){\n                outOfBoundsY -= y1;\n                elmnt.style.top = (elmnt.offsetTop - y1) + \"px\";\n            }\n        }\n\n        if(!dx == 0){\n            dxOld = dx;\n        }\n        if(!dy == 0){\n            dyOld = dy;\n        }\n    }\n\n    function closeDragElement(e) {\n        // stop moving when mouse button is released by removing document mouse events\n        document.onmouseup = null;\n        document.onmousemove = null;\n        \n        if(elmnt.offsetLeft + width > maxX){//force window back in bounds if out\n            elmnt.style.left = `${maxX-width}px`;\n        }else if(elmnt.offsetLeft<0){\n            elmnt.style.left = `0px`;\n        }\n\n        outOfBoundsX = 0;\n        outOfBoundsY = 0;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}